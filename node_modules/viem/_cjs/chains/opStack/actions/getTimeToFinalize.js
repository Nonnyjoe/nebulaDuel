"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimeToFinalize = void 0;
const multicall_js_1 = require("../../../actions/public/multicall.js");
const abis_js_1 = require("../abis.js");
const buffer = 10;
async function getTimeToFinalize(client, parameters) {
    const { chain = client.chain, withdrawalHash, targetChain } = parameters;
    const l2OutputOracleAddress = (() => {
        if (parameters.l2OutputOracleAddress)
            return parameters.l2OutputOracleAddress;
        if (chain)
            return targetChain.contracts.l2OutputOracle[chain.id].address;
        return Object.values(targetChain.contracts.l2OutputOracle)[0].address;
    })();
    const portalAddress = (() => {
        if (parameters.portalAddress)
            return parameters.portalAddress;
        if (chain)
            return targetChain.contracts.portal[chain.id].address;
        return Object.values(targetChain.contracts.portal)[0].address;
    })();
    const [[_outputRoot, proveTimestamp, _l2OutputIndex], period] = await (0, multicall_js_1.multicall)(client, {
        allowFailure: false,
        contracts: [
            {
                abi: abis_js_1.portalAbi,
                address: portalAddress,
                functionName: 'provenWithdrawals',
                args: [withdrawalHash],
            },
            {
                abi: abis_js_1.l2OutputOracleAbi,
                address: l2OutputOracleAddress,
                functionName: 'FINALIZATION_PERIOD_SECONDS',
            },
        ],
    });
    const secondsSinceProven = Date.now() / 1000 - Number(proveTimestamp);
    const secondsToFinalize = Number(period) - secondsSinceProven;
    const seconds = Math.floor(secondsToFinalize < 0 ? 0 : secondsToFinalize + buffer);
    const timestamp = Date.now() + seconds * 1000;
    return { period: Number(period), seconds, timestamp };
}
exports.getTimeToFinalize = getTimeToFinalize;
//# sourceMappingURL=getTimeToFinalize.js.map