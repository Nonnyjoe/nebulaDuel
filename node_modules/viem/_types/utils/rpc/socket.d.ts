import type { ErrorType } from '../../errors/utils.js';
import type { RpcRequest, RpcResponse } from '../../types/rpc.js';
import { type CreateBatchSchedulerErrorType } from '../promise/createBatchScheduler.js';
type Id = string | number;
type CallbackFn = (message: any) => void;
type CallbackMap = Map<Id, CallbackFn>;
export type GetSocketParameters = {
    onResponse: (data: RpcResponse) => void;
};
export type Socket<socket extends {}> = socket & {
    close(): void;
    request(params: {
        body: RpcRequest;
    }): void;
};
export type SocketRpcClient<socket extends {}> = {
    close(): void;
    socket: Socket<socket>;
    request(params: {
        body: RpcRequest;
        onError?: (error: Error) => void;
        onResponse: (message: RpcResponse) => void;
    }): void;
    requestAsync(params: {
        body: RpcRequest;
        timeout?: number;
    }): Promise<RpcResponse>;
    requests: CallbackMap;
    subscriptions: CallbackMap;
    url: string;
};
export type GetSocketRpcClientParameters<socket extends {}> = {
    url: string;
    getSocket(params: GetSocketParameters): Promise<Socket<socket>>;
};
export type GetSocketRpcClientErrorType = CreateBatchSchedulerErrorType | ErrorType;
export declare const socketClientCache: Map<string, SocketRpcClient<{
    close(): void;
    request(params: {
        body: RpcRequest;
    }): void;
}>>;
export declare function getSocketRpcClient<socket extends {}>(params: GetSocketRpcClientParameters<socket>): Promise<SocketRpcClient<socket>>;
export {};
//# sourceMappingURL=socket.d.ts.map